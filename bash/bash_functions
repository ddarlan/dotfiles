# Reversed tailf
#
# Usage: "flait logfile"
railf() {
    while true;do 
        clear
        tail -n $(($LINES-1)) $1 \
        | tac \
        | cut -c 1-$COLUMNS
        sleep 1
    done
}

# CD to a directory, but open it in vim, if it is a file
cd() {
    if [ -f "${1}" ]; then
        vim "${@}"
    else
        builtin cd "${@}"
    fi
}

# make a directory and cd to it
mkcd() {
    if [ ! -d "${1}" ]; then
        mkdir -p "${1}"
    fi
    cd "${1}"
}

# Vagrant convenience
vm() {
    if [ "${1}" = "set" ]; then
        VAGRANT_PROJECT="$(pwd)"
        colorize "Your <blue>VAGRANT_PROJECT</blue> has been set to <purple>${VAGRANT_PROJECT}</purple>"
        return
    fi

    # Walk up the directory tree trying to find the vagrant root automatically
    if [ -z "${VAGRANT_PROJECT}" ]; then
        # Try to find the next "vagrant" directory on the way up the directory chain
        local currentDirectory="$(pwd)"
        while true; do
            if [ -d "${currentDirectory}/vagrant" ]; then
                VAGRANT_PROJECT="${currentDirectory}/vagrant"
                colorize "Your <blue>VAGRANT_PROJECT</blue> has been set to <purple>${VAGRANT_PROJECT}</purple>"
                break
            fi

            if [ "${currentDirectory}" = "$(dirname "${currentDirectory}")" ]; then
                # We reached the root
                break
            else
                currentDirectory="$(dirname "${currentDirectory}")"
            fi
        done
    fi

    local project_path="${VAGRANT_PROJECT:-$(pwd)}"
    pushd "${project_path}" >/dev/null
    vagrant "$@"
    popd >/dev/null
}

docker() {
    local DOCKER="$(which docker)"

    # Make sure the boot2docker environment is up, before running a docker
    # command
    local boot2dockerState="$(boot2docker status)"

    if [ "${boot2dockerState}" != "running" ]; then
        boot2docker up
    fi

    # Ensure the proper environment is set to run docker commands on the
    # boot2docker vm
    if [ -z "${DOCKER_HOST}" ]; then
        eval "$(boot2docker shellinit)"
    fi

    $DOCKER "$@"
}

# Define a more convinient way of extracting colums using awk
# Usage column <colnumber> [<optional_column seperator>] < infile
column() {
    eval awk ${2:+"-F $2"} "'{print \$$1}'";
}

# In honor to Star-Trek
makeitso() {
    sudo $(history 2|head -n 1|sed -e 's@^[0-9]\+\s\+@@')
}

# Copy current working directory to clipboard AND output it
cwd() {
    pwd | tr -d '\n' | pbcopy
    pwd
}

# Rename using a temporary step to overcome hfs case-insensitivity
mvcase() {
    local source="${1}"
    local destination="${2}"

    local uuid="$(uuidgen)"

    while [ -e "${source}.${uuid}" ]; do
        uuid="$(uuidgen)"
    done

    mv "${source}" "${source}.${uuid}"
    mv "${source}.${uuid}" "${destination}"
}

# Rename using a temporary step to overcome hfs case-insensitivity, but for git
gitmvcase() {
    local source="${1}"
    local destination="${2}"

    local uuid="$(uuidgen)"

    while [ -e "${source}.${uuid}" ]; do
        uuid="$(uuidgen)"
    done

    git mv "${source}" "${source}.${uuid}"
    git mv "${source}.${uuid}" "${destination}"
}
