#!/bin/bash

_jsonstream_count_opened_curly_braces() {
  local str="$1"
  local count=0
  while [[ "$str" =~ \{ ]]; do
    str="${str#*\{}"
    ((count++))
  done
  echo "$count"
}

_jsonstream_count_closed_curly_braces() {
  local str="$1"
  local count=0
  while [[ "$str" =~ \} ]]; do
    str="${str#*\}}"
    ((count++))
  done
  echo "$count"
}

jsonstream() {
  while read -r line; do
    local opened=0
    local closed=0
    local line_opened=0
    local line_closed=0
    local multi_lines=0
    local buffer=""

    if [[ "$line" =~ ^\{ ]]; then
      # Assume json
      buffer="$line"
      line_opened="$(_jsonstream_count_opened_curly_braces "$line")"
      line_closed="$(_jsonstream_count_closed_curly_braces "$line")"
      opened="$((opened + line_opened))"
      closed="$((closed + line_closed))"

      while [[ "$opened" -gt "$closed" ]]; do
        if [ "$multi_lines" -gt 5 ]; then
          # Abort after 6 lines of assumed json
          echo "$buffer"
          continue 2
        fi
        multi_lines="$((multi_lines + 1))"
        #echo "LINES: $multi_lines" >&2
        read -r line
        buffer="$buffer$line"
        line_opened="$(_jsonstream_count_opened_curly_braces "$line")"
        line_closed="$(_jsonstream_count_closed_curly_braces "$line")"
        opened="$((opened + line_opened))"
        closed="$((closed + line_closed))"
      done

      if jq . <<<"${buffer}" >/dev/null 2>&1; then
        jq . <<<"${buffer}"
      else
        echo "${buffer}"
      fi

    else
      # Assume not json
      echo "$line"
    fi
  done
}

# Only run this when the script is executed, not sourced:
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
  set -o errexit
  set -o pipefail
  set -o nounset

  jsonstream
fi
