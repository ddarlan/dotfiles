#!/bin/bash

# Get a quick answer from the duck duck go chat api within the terminal.
# This script assumes you have read and already accepted their license agreement.
# You can't use this script if you didn't do this before hand!

STATUS_URL="https://duckduckgo.com/duckchat/v1/status"
CHAT_URL="https://duckduckgo.com/duckchat/v1/chat"
MODEL="gpt-4o-mini"

# Commandline question template
COMMANDLINE_QUESTION_TEMPLATE="$(
  cat <<EOF
You are a helpful AI that builds command lines for the shell of a Linux/macOS system. Please respond with as little additional context as possible. Preferably without any context and provide me only the commands as an answer to my question. Always enclose them with ---COMMAND START--- and ---COMMAND END---.
EOF
)"

fake_curl() {
  curl -A "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36" \
    -H "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8" \
    -H "Accept-Language: de-DE,de;q=0.9,en-US;q=0.8,en;q=0.7" \
    -H "Connection: keep-alive" \
    -H "Upgrade-Insecure-Requests: 1" \
    "$@"
}

ai_request() {
  local content="$1"

  local response
  local return_code

  # Send curl request to status url to get x-vqd-4 HEADER but with a full GET request
  response=$(fake_curl -s -H "x-vqd-accept: 1" -X GET -D - "$STATUS_URL" -o /dev/null)
  return_code=$?

  # Extract the x-vqd-4 header from the response
  local vqd
  vqd=$(echo "$response" | grep -i "x-vqd-4:" | awk '{print $2}' | tr -d '\r')

  # If request failed or x-vqd-4 header is not found, exit
  if [ "$return_code" -ne 0 ] || [ -z "$vqd" ]; then
    echo "Failed to get x-vqd-4 header: ${response}"
    exit 1
  fi

  # Create request json {model: "${MODEL}", messages: [{role: "user", content: "${content}"}]}
  local request_json
  request_json=$(jq -n --arg model "$MODEL" --arg content "$content" '{model: $model, messages: [{role: "user", content: $content}]}')

  # Send curl request to chat url with request json and x-vqd-4 header
  response=$(fake_curl -s -X POST -H "x-vqd-4: $vqd" -H "Content-Type: application/json" -d "$request_json" "$CHAT_URL")
  return_code=$?

  # If request failed, exit
  if [ "$return_code" -ne 0 ] || [ -z "$response" ]; then
    echo "Failed to get response from chat api: ${response}"
    exit 1
  fi

  # The response is streamed. We need to wait for the last line to be received.
  # The data is received in the following lines
  # data: JSON Message {message: "...", action: "success", ...}
  # ...
  # data: [DONE]

  # Lets read the message and check for the success action every time
  local full_message=""
  local message
  local action
  while read -r line; do
    if [ "$line" == "[DONE]" ]; then
      break
    fi

    message=$(echo "$line" | jq -r '.message')
    action=$(echo "$line" | jq -r '.action')

    if [ "$action" != "success" ]; then
      echo ""
      echo "Something went wrong: ${message}"
      exit 1
    else
      if [ -z "$message" ] || [ "$message" = "null" ]; then
        continue
      fi

      full_message="${full_message}${message}"
    fi
  done < <(echo "$response" | grep -E "data: " | sed -e 's/^data: //')

  echo "${full_message}"
}

usage() {
  echo "Usage: ai [-h] [-q]"
  echo "  -h  Show this help message and exit"
  echo "  -q  Ask a full question instead of just retrieving a commandline"
}

main() {
  # Parse possible arguments -h|--help, -q|--question
  local question=""

  while true; do
    case "$1" in
    -h | --help)
      usage
      exit 0
      ;;
    -q | --question)
      question="true"
      shift
      ;;
    -* | --*)
      echo "Invalid option: $1" >&2
      usage
      exit 1
      ;;
    *)
      break
      ;;
    esac
  done

  # If no arguments are provided, show usage
  if [ "$#" -eq 0 ]; then
    usage
    exit 1
  fi

  if [ -n "$question" ]; then
    echo -n "Thinking really hard on this problem for you..."
    local answer
    answer=$(ai_request "$*")
    echo -e "\r\033[K${answer}"
  else
    echo -n "Thinking really hard on this problem for you..."
    local answer
    answer=$(ai_request "${COMMANDLINE_QUESTION_TEMPLATE}: $*")

    # Print the lines between the first and last command start/end markers not using bash regex
    if [[ "$answer" =~ ---COMMAND\ START---(.+)---COMMAND\ END--- ]]; then
      echo -e "\r\033[K${BASH_REMATCH[1]}"
    fi
  fi
}

main "$@"
